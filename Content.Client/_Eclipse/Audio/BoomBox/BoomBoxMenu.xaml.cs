using System.IO;
using Content.Shared._Eclipse.Audio.BoomBox;
using Robust.Client.Audio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Audio.Components;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using static Robust.Client.UserInterface.Controls.BaseButton;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client._Eclipse.Audio.BoomBox;

[GenerateTypedNameReferences]
public sealed partial class BoomBoxMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IFileDialogManager _dialogs = default!;
    private BoomBoxSystem _audioSystem;

    /// <summary>
    /// Are we currently 'playing' or paused for the play / pause button.
    /// </summary>
    private bool _playState;

    /// <summary>
    /// True if playing, false if paused.
    /// </summary>
    public event Action<bool>? OnPlayPressed;
    public event Action? OnStopPressed;
    public event Action<byte[]>? OnSongSelected;
    public event Action<float>? SetTime;

    private EntityUid? _audio;

    private float _lockTimer;

    private bool _isMidiFileDialogueWindowOpen;
    public EntityUid Entity;

    public BoomBoxMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _audioSystem = _entManager.System<BoomBoxSystem>();

        FileButton.OnPressed += BoomBoxFileButtonOnOnPressed;

        PlayButton.OnPressed += args =>
        {
            OnPlayPressed?.Invoke(!_playState);
        };

        StopButton.OnPressed += args =>
        {
            OnStopPressed?.Invoke();
        };
        PlaybackSlider.OnReleased += PlaybackSliderKeyUp;

        SetPlayPauseButton(_audioSystem.IsPlaying(_audio), force: true);
    }

    public BoomBoxMenu(BoomBoxSystem audioSystem)
    {
        _audioSystem = audioSystem;
    }

    private async void BoomBoxFileButtonOnOnPressed(ButtonEventArgs obj)
    {
        if (_isMidiFileDialogueWindowOpen)
            return;

        var filters = new FileDialogFilters(new FileDialogFilters.Group("ogg"));

        _isMidiFileDialogueWindowOpen = true;

        await using var file = await _dialogs.OpenFile(filters);

        _isMidiFileDialogueWindowOpen = false;

        if (Disposed)
            return;

        if (file == null)
            return;

        if (!_entManager.HasComponent<BoomBoxComponent>(Entity))
            return;

        await using var memStream = new MemoryStream((int)file.Length);
        await file.CopyToAsync(memStream);

        if (!_entManager.TryGetComponent<BoomBoxComponent>(Entity, out var instrument))
            return;

        OnSongSelected?.Invoke(memStream.GetBuffer().AsSpan(0, (int)memStream.Length).ToArray());
    }

    public void SetAudioStream(EntityUid? audio)
    {
        _audio = audio;
    }

    private void PlaybackSliderKeyUp(Slider args)
    {
        SetTime?.Invoke(PlaybackSlider.Value);
        _lockTimer = 0.5f;
    }

    public void SetPlayPauseButton(bool playing, bool force = false)
    {
        if (_playState == playing && !force)
            return;

        _playState = playing;

        if (playing)
        {
            PlayButton.Text = Loc.GetString("jukebox-menu-buttonpause");
            return;
        }

        PlayButton.Text = Loc.GetString("jukebox-menu-buttonplay");
    }

    public void SetSelectedSong(string name, float length)
    {
        SetSelectedSongText(name);
        PlaybackSlider.MaxValue = length;
        PlaybackSlider.SetValueWithoutEvent(0);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_lockTimer > 0f)
        {
            _lockTimer -= args.DeltaSeconds;
        }

        PlaybackSlider.Disabled = _lockTimer > 0f;

        if (_entManager.TryGetComponent(_audio, out BoomBoxAudioComponent? audio))
        {
            DurationLabel.Text = $@"{TimeSpan.FromSeconds(audio.PlaybackPosition):mm\:ss} / {_audioSystem.GetAudioLength(audio.FileBytes):mm\:ss}";
        }
        else
        {
            DurationLabel.Text = $"00:00 / 00:00";
        }

        if (PlaybackSlider.Grabbed)
            return;

        if (audio != null || _entManager.TryGetComponent(_audio, out audio))
        {
            PlaybackSlider.SetValueWithoutEvent(audio.PlaybackPosition);
        }
        else
        {
            PlaybackSlider.SetValueWithoutEvent(0f);
        }

        SetPlayPauseButton(_audioSystem.IsPlaying(_audio, audio));
    }

    public void SetSelectedSongText(string? text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            SongName.Text = text;
        }
        else
        {
            SongName.Text = "---";
        }
    }
}
